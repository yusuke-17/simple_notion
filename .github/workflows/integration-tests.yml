name: Integration Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # 手動実行を許可

jobs:
  integration-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    services:
      postgres:
        image: postgres:17
        env:
          POSTGRES_DB: notion_app
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Install PostgreSQL client
      run: |
        sudo apt-get update
        sudo apt-get install -y postgresql-client

    - name: Install backend dependencies
      working-directory: ./backend
      run: go mod download

    - name: Wait for PostgreSQL
      run: |
        echo "Waiting for PostgreSQL to be ready..."
        until pg_isready -h localhost -p 5432 -U postgres; do
          echo "PostgreSQL is unavailable - sleeping"
          sleep 2
        done
        echo "PostgreSQL is up and running!"

    - name: Run database migrations
      working-directory: ./backend
      run: |
        echo "Running database migrations..."
        PGPASSWORD=password psql -h localhost -U postgres -d notion_app -f migrations/001_init.sql
        PGPASSWORD=password psql -h localhost -U postgres -d notion_app -f migrations/002_tree_structure.sql
        echo "Migrations completed successfully!"

    - name: Start backend server
      working-directory: ./backend
      run: |
        echo "Starting backend server..."
        export DATABASE_URL="postgres://postgres:password@localhost:5432/notion_app?sslmode=disable"
        export JWT_SECRET="github-actions-test-secret"
        export PORT="8080"
        go run cmd/server/main.go &
        BACKEND_PID=$!
        echo $BACKEND_PID > ../backend.pid
        echo "Backend server started with PID: $BACKEND_PID"
        
        # バックエンドサーバーの起動を待つ
        echo "Waiting for backend server to start..."
        for i in {1..30}; do
          if curl -f http://localhost:8080/api/auth/login -X POST -H "Content-Type: application/json" -d '{"email":"test","password":"test"}' >/dev/null 2>&1; then
            echo "Backend server is responding!"
            break
          elif [ $i -eq 30 ]; then
            echo "Backend server failed to start within 30 seconds"
            exit 1
          else
            echo "Attempt $i: Backend server not ready, waiting..."
            sleep 2
          fi
        done

    - name: Verify backend health
      run: |
        echo "Verifying backend health..."
        response=$(curl -s -o /dev/null -w "%{http_code}" -X POST http://localhost:8080/api/auth/login -H "Content-Type: application/json" -d '{"email":"test","password":"test"}')
        if [ "$response" = "401" ]; then
          echo "✅ Backend is healthy (401 Unauthorized is expected for invalid credentials)"
        else
          echo "❌ Backend health check failed. Expected 401, got: $response"
          curl -X POST http://localhost:8080/api/auth/login -H "Content-Type: application/json" -d '{"email":"test","password":"test"}' || true
          exit 1
        fi

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: |
        echo "Installing frontend dependencies..."
        npm ci
        echo "Frontend dependencies installed successfully!"

    - name: Run integration tests
      working-directory: ./frontend
      run: |
        echo "Running integration tests..."
        npm run test:integration
        echo "Integration tests completed successfully!"

    - name: Cleanup
      if: always()
      run: |
        echo "Cleaning up processes..."
        if [ -f backend.pid ]; then
          BACKEND_PID=$(cat backend.pid)
          if kill -0 $BACKEND_PID 2>/dev/null; then
            echo "Stopping backend server with PID: $BACKEND_PID"
            kill $BACKEND_PID || true
            sleep 2
            kill -9 $BACKEND_PID 2>/dev/null || true
          fi
          rm backend.pid
        fi
        echo "Cleanup completed!"

    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: integration-test-results
        path: |
          frontend/coverage/
          frontend/test-results/
        retention-days: 7
