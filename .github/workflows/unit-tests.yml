name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # 手動実行を許可

jobs:
  frontend-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      run: npm ci

    - name: Run linting
      run: npm run lint

    - name: Run unit tests
      run: npm run test:coverage

    - name: Upload frontend test coverage
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: frontend-test-coverage
        path: frontend/coverage/
        retention-days: 7

    - name: Build project
      run: npm run build

  backend-tests:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'

    - name: Verify Go module files
      run: |
        pwd
        ls -la
        echo "Checking for go.mod file..."
        if [ -f "go.mod" ]; then
          echo "✅ go.mod found"
          cat go.mod
        else
          echo "❌ go.mod not found"
          echo "Files in current directory:"
          ls -la
        fi
        if [ -f "go.sum" ]; then
          echo "✅ go.sum found"
        else
          echo "❌ go.sum not found"
        fi

    - name: Install dependencies
      run: |
        if [ -f "go.mod" ]; then
          go mod download
        else
          echo "Error: go.mod file not found. Please ensure go.mod and go.sum are committed to the repository."
          exit 1
        fi

    - name: Run Go unit tests
      run: go test -v -race -coverprofile=coverage.out ./...

    - name: Generate coverage report
      run: go tool cover -html=coverage.out -o coverage.html

    - name: Upload backend test coverage
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: backend-test-coverage
        path: |
          backend/coverage.out
          backend/coverage.html
        retention-days: 7

  docker-integration-tests:
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]  # 基本テストが成功した場合のみ実行
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Test Docker builds
      run: |
        # Dockerイメージのビルドテストのみ実行（テスト重複を避ける）
        echo "Testing backend development Docker build..."
        docker build -f backend/Dockerfile.dev -t backend-dev-test:latest backend/
        
        echo "Testing frontend development Docker build..."
        docker build -f frontend/Dockerfile.dev -t frontend-dev-test:latest frontend/
        
        echo "Testing production Docker builds..."
        docker build -f backend/Dockerfile -t backend-prod-test:latest backend/
        docker build -f frontend/Dockerfile -t frontend-prod-test:latest frontend/
        
        echo "Docker build tests completed successfully!"

    - name: Test Docker Compose setup
      run: |
        # Docker Composeの設定テスト
        docker compose -f docker-compose.yml config
        docker compose -f docker-compose.dev.yml config

    - name: Test Docker development environment
      run: |
        # .env.exampleから.envを作成
        if [ -f .env.example ]; then
          cp .env.example .env
        else
          echo "Warning: .env.example not found, creating minimal .env"
          echo "# Minimal env for testing" > .env
        fi
        
        # 開発環境起動テスト
        echo "Starting development environment..."
        docker compose -f docker-compose.dev.yml up -d --build
        
        # サービス起動待機
        echo "Waiting for services to start..."
        sleep 60
        
        # 各サービスのステータス確認
        echo "Checking service status..."
        docker compose -f docker-compose.dev.yml ps
        
        # ヘルスチェック（フロントエンド）
        echo "Testing frontend connectivity..."
        timeout 30 bash -c 'until curl -f http://localhost:5173 > /dev/null 2>&1; do echo "Waiting for frontend..."; sleep 3; done' || echo "Frontend health check failed"
        
        # ヘルスチェック（バックエンド）
        echo "Testing backend connectivity..."
        timeout 30 bash -c 'until curl -f http://localhost:8080 > /dev/null 2>&1; do echo "Waiting for backend..."; sleep 3; done' || echo "Backend health check failed"
        
        # ログ出力（デバッグ用）
        echo "Service logs:"
        docker compose -f docker-compose.dev.yml logs --tail=20
        
    - name: Cleanup Docker environment
      if: always()
      run: |
        # クリーンアップ
        docker compose -f docker-compose.dev.yml down -v
        docker system prune -f
